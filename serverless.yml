# Service name
service: events-api

# Serverless Plugins declaration.
plugins:
  - serverless-esbuild

provider:
  name: aws
  runtime: nodejs20.x
  architecture: x86_64
  region: ${opt:region, "eu-west-1"}
  stage: ${opt:stage, "int"}
  stackName: ${self:service}-${self:provider.stage}-stack
  timeout: 45
  environment:
    PAYLOAD_BUCKET: !Ref PayloadBucket
    API_KEY: !GetAtt EventsAPIKey.ApiKey # DON'T DO THIS! USE AWS SECRET MANAGER.
    HTTP_ENDPOINT: !GetAtt EventsAPI.Dns.Http
    REALTIME_ENDPOINT: !GetAtt EventsAPI.Dns.Realtime
    SERVICE_ROLE: !GetAtt GenericServiceRole.Arn
    CHANNEL_NAMESPACE: !Ref EventsNamespace

  tracing:
    lambda: true
package:
  individually: true

custom:
  base: ${self:service}-${self:provider.stage}
  esbuild:
    bundle: true
    minify: false
    target: node18

functions:
  publisher:
    name: event-publisher
    description: "Lambda Function for pubishing events to a channel of the events API"
    handler: src/handlers/publisher/index.handler
    role: GenericServiceRole
    timeout: 30
    memorySize: 256
    environment:
      RETRIER_LAMBDA: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:event-retry

  acknowledger:
    name: event-ack
    description: "Lambda Function for removing Schedules from Eventbridge"
    handler: src/handlers/acknowledger/index.handler
    role: GenericServiceRole
    timeout: 30
    memorySize: 256
    events:
      - httpApi:
          method: POST
          path: /ack

  retrier:
    name: event-retry
    description: "Lambda Function for retrying events whose ack is not received from client"
    handler: src/handlers/retry/index.handler
    role: GenericServiceRole
    timeout: 30
    memorySize: 256

# IAM-Roles and Policy
resources:
  Resources:
    # Ideally, one role per Lambda for least privilege principle
    # Do not use wildcards for permissions
    GenericServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:service}-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - "sts:AssumeRole"
            - Effect: Allow
              Principal:
                Service:
                  - scheduler.amazonaws.com
              Action:
                - sts:AssumeRole
            - Effect: Allow
              Principal:
                Service:
                  - appsync.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - iam:PassRole
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:Put*
                    - s3:Get*
                    - s3:List*
                  Resource:
                    - !Join ["", ["arn:aws:s3:::", !Ref PayloadBucket]]
                    - !Join ["", ["arn:aws:s3:::", !Ref PayloadBucket, "/*"]]
                - Effect: Allow
                  Action:
                    - scheduler:CreateSchedule
                    - scheduler:DeleteSchedule
                    - scheduler:GetSchedule
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:PutLogEvents
                  Resource: "*"

    PayloadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-poc-bucket
        AccessControl: Private
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldObjects
              Status: Enabled
              ExpirationInDays: 1

    EventsAPI:
      Type: AWS::AppSync::Api
      Properties:
        EventConfig:
          AuthProviders:
            - AuthType: API_KEY
          ConnectionAuthModes:
            - AuthType: API_KEY
          DefaultPublishAuthModes:
            - AuthType: API_KEY
          DefaultSubscribeAuthModes:
            - AuthType: API_KEY
          LogConfig:
            CloudWatchLogsRoleArn: !GetAtt GenericServiceRole.Arn
            LogLevel: ALL
        Name: events-api-poc

    EventsAPIKey:
      Type: AWS::AppSync::ApiKey
      Properties:
        ApiId: !GetAtt EventsAPI.ApiId
        Expires: 1733011200

    EventsNamespace:
      Type: AWS::AppSync::ChannelNamespace
      Properties:
        ApiId: !GetAtt EventsAPI.ApiId
        Name: new-updates

    # enable JSON structured logging for all Lambdas (for Serverless V3)
    PublisherLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        LoggingConfig:
          LogFormat: JSON
          ApplicationLogLevel: INFO
          SystemLogLevel: INFO

    AcknowledgerLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        LoggingConfig:
          LogFormat: JSON
          ApplicationLogLevel: INFO
          SystemLogLevel: INFO

    RetrierLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        LoggingConfig:
          LogFormat: JSON
          ApplicationLogLevel: INFO
          SystemLogLevel: INFO
